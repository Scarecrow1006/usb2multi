<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\ashwin\Desktop\Academics\3-1\ESD\Project\Final\test\led.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\ashwin\Desktop\Academics\3-1\ESD\Project\Final\test\led.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sun Nov 25 19:01:33 2018
<BR><P>
<H3>Maximum Stack Usage =         60 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[253d568]">Reset_Handler</a>
 <LI><a href="#[253d5a4]">__user_initial_stackheap</a>
 <LI><a href="#[253d7c0]">Undef_Handler</a>
 <LI><a href="#[253d784]">SWI_Handler</a>
 <LI><a href="#[253d748]">PAbt_Handler</a>
 <LI><a href="#[253d70c]">DAbt_Handler</a>
 <LI><a href="#[253d6d0]">IRQ_Handler</a>
 <LI><a href="#[253d694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[253d7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d7c0]">Undef_Handler</a><BR>
 <LI><a href="#[253d784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d784]">SWI_Handler</a><BR>
 <LI><a href="#[253d748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d748]">PAbt_Handler</a><BR>
 <LI><a href="#[253d70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d70c]">DAbt_Handler</a><BR>
 <LI><a href="#[253d6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[253d694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253d694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[253d568]">Reset_Handler</a>
 <LI><a href="#[253d7c0]">Undef_Handler</a>
 <LI><a href="#[253d784]">SWI_Handler</a>
 <LI><a href="#[253d748]">PAbt_Handler</a>
 <LI><a href="#[253d70c]">DAbt_Handler</a>
 <LI><a href="#[253d6d0]">IRQ_Handler</a>
 <LI><a href="#[253d694]">FIQ_Handler</a>
 <LI><a href="#[25372f8]">__main</a>
 <LI><a href="#[253c4c4]">main</a>
 <LI><a href="#[2533464]">__I$use$semihosting</a>
 <LI><a href="#[2538f54]">USB_EndPoint0</a>
 <LI><a href="#[2538504]">USB_EndPoint1</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[253d568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25372f8]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2530e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[25371cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2530e6c]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25372f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2530e30]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25371cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2530df4]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2530c50]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2530c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2530c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2530b60]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25363bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[25341c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2536d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[253488c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2534904]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2534cc4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2534b5c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[253479c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2534814]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2534bd4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2534ae4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[25350c0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2534f1c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2534ea4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2534e2c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2534db4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2534d3c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2534fd0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2534760]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2534c4c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2534a6c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2535048]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[25337ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2533fe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[2532b40]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2532960]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2532924]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2532a8c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2532bf4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2532a14]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25371cc]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2530e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[25372f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2536dd0]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2536a4c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2536920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2536d1c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25363bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2536d58]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2536c68]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[25367b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2536ca4]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2535c3c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25367b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2533fe0]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[25337ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[253401c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2533fa4]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2533c98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[253d5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2536920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[253c53c]"></a>GetInReport</STRONG> (ARM, 112 bytes, Stack size 0 bytes, demo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[2538bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[2538d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
</UL>

<P><STRONG><a name="[253c500]"></a>SetOutReport</STRONG> (ARM, 480 bytes, Stack size 24 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetOutReport &rArr; SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[253c410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_func
<LI><a href="#[253c44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
<LI><a href="#[253c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2538c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
</UL>

<P><STRONG><a name="[253c4c4]"></a>main</STRONG> (ARM, 36 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = main &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[253c398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[253c3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[253bf24]"></a>initPWM</STRONG> (ARM, 92 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253c44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
</UL>

<P><STRONG><a name="[253bee8]"></a>feedSeq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[253beac]"></a>connectPLL0</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[253be70]"></a>setupPLL0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[253be34]"></a>initClocks</STRONG> (ARM, 40 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[253be70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL0
<LI><a href="#[253beac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectPLL0
<LI><a href="#[253bee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[253c44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
</UL>

<P><STRONG><a name="[253c44c]"></a>PWM_func</STRONG> (ARM, 44 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_func &rArr; initClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[253be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
<LI><a href="#[253bf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[253c500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[253bab0]"></a>MASTERINIT</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPItrx
</UL>

<P><STRONG><a name="[253ba74]"></a>SPItrx</STRONG> (ARM, 88 bytes, Stack size 4 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[253bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASTERINIT
</UL>
<BR>[Called By]<UL><LI><a href="#[253c410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_func
</UL>

<P><STRONG><a name="[253c410]"></a>SPI_func</STRONG> (ARM, 64 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[253ba74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPItrx
</UL>
<BR>[Called By]<UL><LI><a href="#[253c500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[253b510]"></a>I2C_INIT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[253b4d4]"></a>I2C_START</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[253b498]"></a>I2C_WRITE</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[253b45c]"></a>I2C_READ_ACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[253b420]"></a>I2C_READ_NACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[253b3e4]"></a>I2C_MULTIREAD</STRONG> (ARM, 144 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[253b3a8]"></a>I2C_STOP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[253c488]"></a>I2C_func</STRONG> (ARM, 48 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_func
</UL>
<BR>[Calls]<UL><LI><a href="#[253b3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[253b498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[253b4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[253b510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[253c500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[253a8a4]"></a>EPAdr</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[253a46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[253a4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[253a4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[253a520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[253a55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[253a5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>

<P><STRONG><a name="[253a868]"></a>WrCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[253a82c]"></a>WrCmdDat</STRONG> (ARM, 84 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[253a4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[253a4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[253a520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[253a55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[253a610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[253a688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[253a7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[253c3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>

<P><STRONG><a name="[253a7f0]"></a>RdCmdDat</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253a3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[253a7b4]"></a>USB_SetAddress</STRONG> (ARM, 56 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[253c398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[253a778]"></a>USB_Reset</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
<LI><a href="#[253c398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[253a73c]"></a>USB_Resume</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[253a700]"></a>USB_Suspend</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[253a6c4]"></a>USB_ISR</STRONG> (ARM, 392 bytes, Stack size 40 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253a304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
<LI><a href="#[253a700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[253a73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume
<LI><a href="#[253a778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[253a7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[253a868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[253c398]"></a>USB_Init</STRONG> (ARM, 208 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[253a778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[253a7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[253c4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253c3d4]"></a>USB_Connect</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[253c4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[253a688]"></a>USB_WakeUp</STRONG> (ARM, 40 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>

<P><STRONG><a name="[253a64c]"></a>USB_WakeUpCfg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[253a610]"></a>USB_Configure</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[253a5d4]"></a>USB_ConfigEP</STRONG> (ARM, 112 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[253a598]"></a>USB_DirCtrlEP</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[253a55c]"></a>USB_EnableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[253a520]"></a>USB_DisableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[253a4e4]"></a>USB_ResetEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[253a4a8]"></a>USB_SetStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[253a46c]"></a>USB_ClrStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[253a430]"></a>USB_ReadEP</STRONG> (ARM, 176 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253758c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[253a868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[2539008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[2539080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
</UL>

<P><STRONG><a name="[253a3f4]"></a>USB_WriteEP</STRONG> (ARM, 144 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[25376b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[253a868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[253a8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2538504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[2538bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[2538fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[2539044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>

<P><STRONG><a name="[253a3b8]"></a>USB_GetFrame</STRONG> (ARM, 48 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253a7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[253a868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[25390bc]"></a>USB_ResetCore</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbcore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253a304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[2539080]"></a>USB_SetupStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2539044]"></a>USB_DataInStage</STRONG> (ARM, 104 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[2538f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2539008]"></a>USB_DataOutStage</STRONG> (ARM, 68 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538fcc]"></a>USB_StatusInStage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538f90]"></a>USB_StatusOutStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538f54]"></a>USB_EndPoint0</STRONG> (ARM, 1468 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2538bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[2538c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
<LI><a href="#[2538c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocol
<LI><a href="#[2538cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdle
<LI><a href="#[2538d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
<LI><a href="#[2538db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocol
<LI><a href="#[2538dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdle
<LI><a href="#[2538e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[2538e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[2538ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[2538edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[2538f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[2538f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[2538fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[2539008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[2539044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[2539080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[253a46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[253a4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[253a598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[253a7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[253a304]"></a>USB_Reset_Event</STRONG> (ARM, 16 bytes, Stack size 8 bytes, usbuser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25390bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[253a6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[2538bd0]"></a>USB_Configure_Event</STRONG> (ARM, 48 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Configure_Event &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[253c53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538504]"></a>USB_EndPoint1</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EndPoint1 &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[253c53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[25384c8]"></a>USB_EndPoint2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[253848c]"></a>USB_EndPoint3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538450]"></a>USB_EndPoint4</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538414]"></a>USB_EndPoint5</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[25383d8]"></a>USB_EndPoint6</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[253839c]"></a>USB_EndPoint7</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538360]"></a>USB_EndPoint8</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538324]"></a>USB_EndPoint9</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[25382e8]"></a>USB_EndPoint10</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[25382ac]"></a>USB_EndPoint11</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538270]"></a>USB_EndPoint12</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538234]"></a>USB_EndPoint13</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[25381f8]"></a>USB_EndPoint14</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[25381bc]"></a>USB_EndPoint15</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[2538d74]"></a>HID_GetReport</STRONG> (ARM, 108 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_GetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[253c53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538c48]"></a>HID_SetReport</STRONG> (ARM, 108 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HID_SetReport &rArr; SetOutReport &rArr; SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[253c500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538dec]"></a>HID_GetIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538cc0]"></a>HID_SetIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538db0]"></a>HID_GetProtocol</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538c84]"></a>HID_SetProtocol</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[25376b8]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>

<P><STRONG><a name="[253767c]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[253758c]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253a430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[2537550]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2537460]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2537424]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[25373e8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2536920]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2535d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[253d5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2536a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[25367b8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2535c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[2536740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2536c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2535d68]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2535d2c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2536920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2535cf0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2533c98]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2533fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2533464]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2533428]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2538f18]"></a>USB_GetDescriptor</STRONG> (ARM, 496 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2539044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538edc]"></a>USB_GetStatus</STRONG> (ARM, 356 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[2539044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538ea0]"></a>USB_SetClrFeature</STRONG> (ARM, 388 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[253a4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[253a64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538e64]"></a>USB_SetConfiguration</STRONG> (ARM, 644 bytes, Stack size 24 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_SetConfiguration &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[253a520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[253a55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[253a5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[253a610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[2538e28]"></a>USB_SetInterface</STRONG> (ARM, 452 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[253a4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[253a520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[253a55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[253a5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2538f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[25341fc]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[25341c0]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[25363bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[253d7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253d784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253d748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253d70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253d6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253d694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253d694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253d694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2536740]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25367b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
