<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\ashwin\Desktop\DEL\FINAL\led.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\ashwin\Desktop\DEL\FINAL\led.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Nov 26 02:29:23 2018
<BR><P>
<H3>Maximum Stack Usage =         60 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26b4568]">Reset_Handler</a>
 <LI><a href="#[26b45a4]">__user_initial_stackheap</a>
 <LI><a href="#[26b47c0]">Undef_Handler</a>
 <LI><a href="#[26b4784]">SWI_Handler</a>
 <LI><a href="#[26b4748]">PAbt_Handler</a>
 <LI><a href="#[26b470c]">DAbt_Handler</a>
 <LI><a href="#[26b46d0]">IRQ_Handler</a>
 <LI><a href="#[26b4694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26b47c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b47c0]">Undef_Handler</a><BR>
 <LI><a href="#[26b4784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b4784]">SWI_Handler</a><BR>
 <LI><a href="#[26b4748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b4748]">PAbt_Handler</a><BR>
 <LI><a href="#[26b470c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b470c]">DAbt_Handler</a><BR>
 <LI><a href="#[26b46d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b46d0]">IRQ_Handler</a><BR>
 <LI><a href="#[26b4694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b4694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26b4568]">Reset_Handler</a>
 <LI><a href="#[26b47c0]">Undef_Handler</a>
 <LI><a href="#[26b4784]">SWI_Handler</a>
 <LI><a href="#[26b4748]">PAbt_Handler</a>
 <LI><a href="#[26b470c]">DAbt_Handler</a>
 <LI><a href="#[26b46d0]">IRQ_Handler</a>
 <LI><a href="#[26b4694]">FIQ_Handler</a>
 <LI><a href="#[26ade48]">__main</a>
 <LI><a href="#[26b33d4]">main</a>
 <LI><a href="#[26a9fb4]">__I$use$semihosting</a>
 <LI><a href="#[26afaa4]">USB_EndPoint0</a>
 <LI><a href="#[26af054]">USB_EndPoint1</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26b4568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26ade48]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[26a79bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[26add1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[26a79bc]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26ade48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26a7980]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26add1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[26a7944]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[26a77a0]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a77a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[26a77a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[26a76b0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26acf0c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[26aad10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26ad86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[26ab3dc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[26ab454]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[26ab814]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[26ab6ac]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[26ab2ec]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[26ab364]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[26ab724]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[26ab634]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[26abc10]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[26aba6c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[26ab9f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[26ab97c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[26ab904]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[26ab88c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[26abb20]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[26ab2b0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[26ab79c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[26ab5bc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[26abb98]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[26aa2fc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26aab30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[26a9690]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[26a94b0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[26a9474]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[26a95dc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[26a9744]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[26a9564]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[26add1c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26a7980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[26ade48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26ad920]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[26ad59c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26ad470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26ad86c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26acf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[26ad8a8]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[26ad7b8]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[26ad308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[26ad7f4]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[26ac78c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26ad308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[26aab30]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[26aa2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[26aab6c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[26aaaf4]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26aa7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26b45a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26ad470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26b344c]"></a>GetInReport</STRONG> (ARM, 100 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetInReport &rArr; I2C_funcr
</UL>
<BR>[Calls]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
<LI><a href="#[26b3398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_func
</UL>
<BR>[Called By]<UL><LI><a href="#[26af054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[26af720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[26af8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
</UL>

<P><STRONG><a name="[26b3410]"></a>SetOutReport</STRONG> (ARM, 480 bytes, Stack size 24 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetOutReport &rArr; SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[26b32a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_func
<LI><a href="#[26b32e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
<LI><a href="#[26b335c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>
<BR>[Called By]<UL><LI><a href="#[26af798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
</UL>

<P><STRONG><a name="[26b33d4]"></a>main</STRONG> (ARM, 36 bytes, Stack size 8 bytes, demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = main &rArr; USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[26b3230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[26b326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[26b2dbc]"></a>initPWM</STRONG> (ARM, 92 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b32e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
</UL>

<P><STRONG><a name="[26b2d80]"></a>feedSeq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b2ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[26b2d44]"></a>connectPLL0</STRONG> (ARM, 36 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b2ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[26b2d08]"></a>setupPLL0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b2ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
</UL>

<P><STRONG><a name="[26b2ccc]"></a>initClocks</STRONG> (ARM, 40 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[26b2d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL0
<LI><a href="#[26b2d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connectPLL0
<LI><a href="#[26b2d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[26b32e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_func
</UL>

<P><STRONG><a name="[26b32e4]"></a>PWM_func</STRONG> (ARM, 44 bytes, Stack size 4 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_func &rArr; initClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[26b2ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initClocks
<LI><a href="#[26b2dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[26b3410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[26b2948]"></a>MASTERINIT</STRONG> (ARM, 56 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b290c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPItrx
</UL>

<P><STRONG><a name="[26b290c]"></a>SPItrx</STRONG> (ARM, 88 bytes, Stack size 4 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[26b2948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASTERINIT
</UL>
<BR>[Called By]<UL><LI><a href="#[26b32a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_func
</UL>

<P><STRONG><a name="[26b32a8]"></a>SPI_func</STRONG> (ARM, 64 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[26b290c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPItrx
</UL>
<BR>[Called By]<UL><LI><a href="#[26b3410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[26b23a8]"></a>I2C_INIT</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
<LI><a href="#[26b335c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[26b236c]"></a>I2C_START</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
<LI><a href="#[26b335c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[26b2330]"></a>I2C_WRITE</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
<LI><a href="#[26b335c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[26b22f4]"></a>I2C_READ_ACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[26b22b8]"></a>I2C_READ_NACK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
</UL>

<P><STRONG><a name="[26b227c]"></a>I2C_MULTIREAD</STRONG> (ARM, 144 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[26b2240]"></a>I2C_STOP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b3320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_funcr
<LI><a href="#[26b335c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_func
</UL>

<P><STRONG><a name="[26b335c]"></a>I2C_func</STRONG> (ARM, 48 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_func
</UL>
<BR>[Calls]<UL><LI><a href="#[26b2240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[26b2330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[26b236c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[26b23a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[26b3410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>

<P><STRONG><a name="[26b3320]"></a>I2C_funcr</STRONG> (ARM, 48 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_funcr
</UL>
<BR>[Calls]<UL><LI><a href="#[26b2240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_STOP
<LI><a href="#[26b22b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_READ_NACK
<LI><a href="#[26b2330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WRITE
<LI><a href="#[26b236c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_START
<LI><a href="#[26b23a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[26b344c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>

<P><STRONG><a name="[26b3398]"></a>ADC_func</STRONG> (ARM, 96 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b344c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>

<P><STRONG><a name="[26b13f4]"></a>EPAdr</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[26b0fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[26b0ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[26b1034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[26b1070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[26b10ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[26b1124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>

<P><STRONG><a name="[26b13b8]"></a>WrCmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b0f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
<LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[26b137c]"></a>WrCmdDat</STRONG> (ARM, 84 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b0fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[26b0ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[26b1034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[26b1070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[26b10ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[26b1160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
<LI><a href="#[26b11d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUp
<LI><a href="#[26b1304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[26b326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connect
</UL>

<P><STRONG><a name="[26b1340]"></a>RdCmdDat</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b0f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetFrame
<LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[26b1304]"></a>USB_SetAddress</STRONG> (ARM, 56 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
<LI><a href="#[26b3230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[26b12c8]"></a>USB_Reset</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
<LI><a href="#[26b3230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[26b128c]"></a>USB_Resume</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[26b1250]"></a>USB_Suspend</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[26b1214]"></a>USB_ISR</STRONG> (ARM, 392 bytes, Stack size 40 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b0e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
<LI><a href="#[26b1250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Suspend
<LI><a href="#[26b128c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Resume
<LI><a href="#[26b12c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[26b1340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[26b13b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[26b3230]"></a>USB_Init</STRONG> (ARM, 208 bytes, Stack size 4 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_Init &rArr; USB_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[26b12c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[26b1304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[26b33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26b326c]"></a>USB_Connect</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[26b33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26b11d8]"></a>USB_WakeUp</STRONG> (ARM, 40 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>

<P><STRONG><a name="[26b119c]"></a>USB_WakeUpCfg</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26af9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
</UL>

<P><STRONG><a name="[26b1160]"></a>USB_Configure</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
</UL>
<BR>[Called By]<UL><LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[26b1124]"></a>USB_ConfigEP</STRONG> (ARM, 112 bytes, Stack size 8 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ConfigEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[26b10e8]"></a>USB_DirCtrlEP</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbhw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26b10ac]"></a>USB_EnableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EnableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[26b1070]"></a>USB_DisableEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DisableEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[26b1034]"></a>USB_ResetEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
</UL>

<P><STRONG><a name="[26b0ff8]"></a>USB_SetStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26b0fbc]"></a>USB_ClrStallEP</STRONG> (ARM, 44 bytes, Stack size 12 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmdDat
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26b0f80]"></a>USB_ReadEP</STRONG> (ARM, 176 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26ae0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[26b13b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26afae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[26afb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[26afbd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
</UL>

<P><STRONG><a name="[26b0f44]"></a>USB_WriteEP</STRONG> (ARM, 144 bytes, Stack size 24 bytes, usbhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26ae208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[26b13b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
<LI><a href="#[26b13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPAdr
</UL>
<BR>[Called By]<UL><LI><a href="#[26af054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint1
<LI><a href="#[26af720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[26afb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[26afb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>

<P><STRONG><a name="[26b0f08]"></a>USB_GetFrame</STRONG> (ARM, 48 bytes, Stack size 4 bytes, usbhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b1340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdCmdDat
<LI><a href="#[26b13b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrCmd
</UL>

<P><STRONG><a name="[26afc0c]"></a>USB_ResetCore</STRONG> (ARM, 56 bytes, Stack size 0 bytes, usbcore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b0e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset_Event
</UL>

<P><STRONG><a name="[26afbd0]"></a>USB_SetupStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetupStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afb94]"></a>USB_DataInStage</STRONG> (ARM, 104 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afa2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[26afa68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afb58]"></a>USB_DataOutStage</STRONG> (ARM, 68 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DataOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afb1c]"></a>USB_StatusInStage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afae0]"></a>USB_StatusOutStage</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_StatusOutStage &rArr; USB_ReadEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afaa4]"></a>USB_EndPoint0</STRONG> (ARM, 1468 bytes, Stack size 8 bytes, usbcore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EndPoint0 &rArr; USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26af720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure_Event
<LI><a href="#[26af798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetReport
<LI><a href="#[26af7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetProtocol
<LI><a href="#[26af810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetIdle
<LI><a href="#[26af8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetReport
<LI><a href="#[26af900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetProtocol
<LI><a href="#[26af93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIdle
<LI><a href="#[26af978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[26af9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[26af9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetClrFeature
<LI><a href="#[26afa2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[26afa68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[26afae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusOutStage
<LI><a href="#[26afb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StatusInStage
<LI><a href="#[26afb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataOutStage
<LI><a href="#[26afb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
<LI><a href="#[26afbd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupStage
<LI><a href="#[26b0fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[26b0ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[26b10e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DirCtrlEP
<LI><a href="#[26b1304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[26b0e54]"></a>USB_Reset_Event</STRONG> (ARM, 16 bytes, Stack size 8 bytes, usbuser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26afc0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetCore
</UL>
<BR>[Called By]<UL><LI><a href="#[26b1214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ISR
</UL>

<P><STRONG><a name="[26af720]"></a>USB_Configure_Event</STRONG> (ARM, 48 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Configure_Event &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[26b344c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af054]"></a>USB_EndPoint1</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usbuser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EndPoint1 &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
<LI><a href="#[26b344c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbuser.o(.constdata)
</UL>
<P><STRONG><a name="[26af018]"></a>USB_EndPoint2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aefdc]"></a>USB_EndPoint3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aefa0]"></a>USB_EndPoint4</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aef64]"></a>USB_EndPoint5</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aef28]"></a>USB_EndPoint6</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aeeec]"></a>USB_EndPoint7</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aeeb0]"></a>USB_EndPoint8</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aee74]"></a>USB_EndPoint9</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aee38]"></a>USB_EndPoint10</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aedfc]"></a>USB_EndPoint11</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aedc0]"></a>USB_EndPoint12</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aed84]"></a>USB_EndPoint13</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aed48]"></a>USB_EndPoint14</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26aed0c]"></a>USB_EndPoint15</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usbuser.o(.text), UNUSED)

<P><STRONG><a name="[26af8c4]"></a>HID_GetReport</STRONG> (ARM, 108 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_GetReport &rArr; GetInReport &rArr; I2C_funcr
</UL>
<BR>[Calls]<UL><LI><a href="#[26b344c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInReport
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af798]"></a>HID_SetReport</STRONG> (ARM, 108 bytes, Stack size 8 bytes, hiduser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HID_SetReport &rArr; SetOutReport &rArr; SPI_func &rArr; SPItrx
</UL>
<BR>[Calls]<UL><LI><a href="#[26b3410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutReport
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af93c]"></a>HID_GetIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af810]"></a>HID_SetIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af900]"></a>HID_GetProtocol</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af7d4]"></a>HID_SetProtocol</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hiduser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26ae208]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b0f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteEP
</UL>

<P><STRONG><a name="[26ae1cc]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[26ae0dc]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b0f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadEP
</UL>

<P><STRONG><a name="[26ae0a0]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[26adfb0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26adf74]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26adf38]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26ad470]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26ac87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[26b45a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[26ad59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[26ad308]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26ac78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[26ad290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[26ad7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26ac8b8]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[26ac87c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26ad470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26ac840]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[26aa7e8]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26aaaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[26a9fb4]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[26a9f78]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[26afa68]"></a>USB_GetDescriptor</STRONG> (ARM, 496 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetDescriptor &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26afb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26afa2c]"></a>USB_GetStatus</STRONG> (ARM, 356 bytes, Stack size 16 bytes, usbcore.o(i.USB_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_GetStatus &rArr; USB_DataInStage &rArr; USB_WriteEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26afb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af9f0]"></a>USB_SetClrFeature</STRONG> (ARM, 388 bytes, Stack size 16 bytes, usbcore.o(i.USB_SetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_SetClrFeature &rArr; USB_ClrStallEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b0fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClrStallEP
<LI><a href="#[26b0ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetStallEP
<LI><a href="#[26b119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WakeUpCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af9b4]"></a>USB_SetConfiguration</STRONG> (ARM, 644 bytes, Stack size 24 bytes, usbcore.o(i.USB_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_SetConfiguration &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b1034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[26b1070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[26b10ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[26b1124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
<LI><a href="#[26b1160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26af978]"></a>USB_SetInterface</STRONG> (ARM, 452 bytes, Stack size 40 bytes, usbcore.o(i.USB_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_SetInterface &rArr; USB_ResetEP
</UL>
<BR>[Calls]<UL><LI><a href="#[26b1034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetEP
<LI><a href="#[26b1070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableEP
<LI><a href="#[26b10ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableEP
<LI><a href="#[26b1124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[26afaa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EndPoint0
</UL>

<P><STRONG><a name="[26aad4c]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[26aad10]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[26acf0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[26b47c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b47c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b47c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26b4784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b4784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26b4748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b4748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26b470c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b470c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b470c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26b46d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26b4694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[26b4694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26b4694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[26ad290]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26ad308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
